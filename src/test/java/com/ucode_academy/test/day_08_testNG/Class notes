TestNG
JavaFaker

-----------------------------------------------------------------

Link for practice:
https://demoqa.com/
https://the-internet.herokuapp.com/
http://secure.smartbearsoftware.com/samples/testcomplete12/WebOrders/login.aspx

-----------------------------------------------------------------


    What is TestNG?
        -> TestNG stands for Test NextGeneration.
        -> TestNG is a unit testing tool that allows us create flow using Annotations.
        -> First we create methods, then we use TestNG annotations to create running flow.
            - We decide which method is test
            - Which method runs before tests
            - Which method runs after tests
            - And so on and so forth

    What are annotations?
        -> Annotations are a way of controlling the flow of the test.

    @Test annotation:
        -> Makes the annotated method a TestNG test.
        -> Which allows us to run those methods(tests) without main method.
        -> All of the tests are independent from each other, UNLESS we create dependency.

        @Test
        public void test1(){

        }

    @BeforeMethod:
        -> Makes the annotated method run before each @Test method.
        -> Usually used for setting up conditions, getting browsers, and pages.

        syntax:

        @BeforeMethod
        public void setUp(){
            WebDriver driver = new ChromeDriver();
            driver.get("");
            -maximize
            -implicit wait
        }

    @AfterMethod:
        -> After method makes the annotated method run AFTER each @Test method.
        -> Usually used to close things down such as closing/quitting the browser

        syntax:

        @AfterMethod
        public void tearDown(){
            -close/quit browser
        }


    @BeforeClass:
        -> BeforeClass makes the annotated method run ONCE before all of test in the class.
        -> Runs even before the BeforeMethod
        -> Used for setting up environments, opening browsers etc.

        -> If you want to open just one browser and run all of your tests in that browser, you can put WebDriver driver = new ChromeDriver(); into before class
        -> If you need to open a browser for EACH TEST, you need to put that line into BeforeMethod.

    @AfterClass:
        -> After class makes the annotated method run once after the tests in the class.


    ASSERTIONS:
        -> Assertions are coming from TestNG
        -> Assertions allows us to do our verification between actual and expected results
        -> If assertions passes, there will be no output in the console
        -> If assertions fails, it will tell us what failed, and why.
        -> Assert class is the class that provides us with all of the assertions.

        Assert.assertEquals(actual, expected);

        -> If we do static import, we don't have to use the class name to call the methods.

        -> You can pass an additional argument into assertion methods just to provide additional information about what failed.
        -> This is OPTIONAL. You don't have to.

    --> assertEquals :
            - This method expected two arguments to be passed: actual, expected.
            - It compares these two values and if they are exact match, it will pass.

            Assert.assertEquals(1,1);
            Assert.assertEquals("title","title");
            Assert.assertEquals("title", driver.getTitle());

    --> assertTrue :
            - This method expects you to pass a boolean value. Or you have to pass a method that returns a boolean value.
            - If the boolean value is TRUE, it will pass. If not it will fail.

        Methods returning boolean values: isSelected, isDisplayed, isEmpty, contains, equals, startsWith etc...

    --> assertFalse :
            - This method expects you to pass a boolean value.
            - If the boolean value is FALSE, IT WILL PASS. If not, it will fail.


    --> If you assertion fails, it will stop executing the current test in the same line where it failed.
    --> It will move to the next test. And start running that one.
    --> For this reason it is not suggested to do multiple assertions in one test, unless you have to.


    How to ignore a test?

    1- Add @Ignore on top of the test.
        - Tests that have @Ignore annotation on top of it will be ignored.

    2- You can comment out the @Test annotation on top of a test method.
        - It will not be recognized as a TestNG test anymore.
        - Therefore it will be ignored in runtime.


    In what order the tests are running if we have multiple tests?
        -> By default tests are running in alphabetical order.

        priority => You can change the running order using priority.
         - By default priority is 0
         - We can change the priority which will change the running order of the tests
         - The lower the priority, the earlier the test will run
         - You can even pass negative numbers in priority
         - Also you can pass math operations like (priority = 2+2) etc

            priority (2+2) == priority(4)